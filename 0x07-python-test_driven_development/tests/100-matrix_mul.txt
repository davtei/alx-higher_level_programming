The ``matrix_mul`` module
=========================

This is a test file for the function matrix_mul

Using ``matrix_mul``
------------------

matrix_mul takes arguments of two matrices and returns the product

Import function
---------------

        >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test cases:
----------

# Test integers:

    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[7, 10], [15, 22]]

    >>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13, 16]]

# Test floats:
    >>> print(matrix_mul([[1.0, 2.5], [3.7, 4.8]], [[1.1, 2.0], [3.9, 4.2]]))
    [[10.85, 12.5], [22.79, 27.560000000000002]]

# Test combination of integers and floats:
    >>> print(matrix_mul([[1, 2.1], [3, 4]], [[1.8, 2], [3, 4.2]]))
    [[8.100000000000001, 10.82], [17.4, 22.8]]

# Test negative elements:
    >>> print(matrix_mul([[1, 2], [3, -4]], [[1, -2], [-3, 4]]))
    [[-5, 6], [15, -22]]

# Test m_a rows not equal to m_b columns:
    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

    >>> print(matrix_mul([[1, 2, 5], [3, 4, 6]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

# Test row size not equal:
    >>> print(matrix_mul([[1, 2, 5], [1, 5], [3, 4, 6]], [[1, 2, 5], [3, 4, 6]]))
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [5, 6, 7], [3, 4]]))
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

# Test non-numeric elements:
    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, "2"], [3, 4]]))
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

    >>> print(matrix_mul([[1, "2"], [3, 4]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

# Test non-matrices:
    >>> print(matrix_mul("alx", [[1, -2], [-3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> print(matrix_mul([[1, -2], [-3, 4]], "alx"))
    Traceback (most recent call last):
    TypeError: m_b must be a list

    >>> print(matrix_mul([2, 4, 6, 8], [[1, -2], [-3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

    >>> print(matrix_mul([[1, -2], [-3, 4]], [2, 4, 6, 8]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

# Test only one matrix provided:
    >>> print(matrix_mul([[1, -2], [-3, 4]]))
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

# Test no arguments provided:
    >>> print(matrix_mul())
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

# Test empty matrices:
    >>> print(matrix_mul([[]], [[1, -2], [-3, 4]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

    >>> print(matrix_mul([[1, -2], [-3, 4]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty
