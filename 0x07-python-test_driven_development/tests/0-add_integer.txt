The ``0-add_integer`` module
============================

This is a test file for the function add_integer.

Import Function
---------------

    >>> add_integer = __import__('0-add_integer').add_integer

Using ``add_integer``
-------------------

add_integer takes two numbers and returns the int sum.

# Test int:

    >>> add_integer(1, 2)
    3

# Test float:

    >>> add_integer(2.1, 3.4)
    5

    >>> add_integer(2.5, 4.7)
    6

# Test negatives:

    >>> add_integer(3, -4)
    -1

    >>> add_integer(-4, -5)
    -9

    >>> add_integer(5, -5)
    0

# Test single argument:

    >>> add_integer(5)
    103

# Test empty argument:

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

# Test non-numeric arguments:

    >>> add_integer("School", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(5, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("Best", "School")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

# Test very large numbers:

    >>> add_integer(100e1000)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

# Test infinity:

    >>> add_integer(100e1000)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(10, 100e1000)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

# Test NaN numbers:

    >>> add_integer('nan')
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
